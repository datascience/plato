<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:x="http://java.sun.com/jsf/composite/htmlx"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:p="http://java.sun.com/jsf/composite/plato"
	template="/WEB-INF/templates/default.xhtml"
	xmlns:a4j="http://richfaces.org/a4j"
	xmlns:rich="http://richfaces.org/rich">

	<ui:define name="title">SCAPE Planning Suite - #{viewWorkflow.currentView.name}</ui:define>
	<ui:define name="content">
		<h:outputStylesheet name="css/tree.css" />
		<h1>#{viewWorkflow.currentView.name}</h1>
		<div class="wfstepinfo">
			<div id="anchors">
				<ul class="anchors">
					<li class="anchors"><a href="#objectivetree" class="anchors">Objective
							Tree</a></li>
					<li class="anchors"><a href="#descriptiveinformation"
						class="anchors">Descriptive Information</a></li>
					<li class="anchors"><a href="#uploads" class="anchors">Uploads</a>
					</li>
					<li class="anchors"><a href="#importexport" class="anchors">Import/Export</a>
					</li>
				</ul>
			</div>
			<div class="wfdescription">
				The goal of this step is to define clearly the requirements and
				goals (objectives) for a preservation solution in a given domain.
				High-level goals are specified, collect detailed requirements, and
				organise them into a tree structure, referred to as the tree of
				objectives or shortly, ‘objective tree‘.
				<div class="more">
					<a href="../help/workflow.html#identify_requirements"
						target="_blank">more</a>
				</div>
			</div>
		</div>

		<div class="margin-bottom-huge; overflow:scroll">
			<h:form id="mainform">
				<h:inputText id="changedflag"
					value="#{identifyRequirements.changed}" style="display:none" />
				<fieldset id="objectivetree" class="center-position size-full">
					<legend class="fieldset-full-size-legend">
						<ui:include src="/plato/shared/legend_nav.xhtml" />
						<h:outputText value=" Objective Tree" />
					</legend>
					<a4j:outputPanel layout="block">
                    Edit: 
                    <h:selectOneMenu
							value="#{identifyRequirements.editingNodeComments}">
							<f:selectItem itemValue="true" itemLabel="Comments" />
							<f:selectItem itemValue="false"
								itemLabel="Scale, restriction, unit" />
							<a4j:ajax event="change" render="objectivetree" />
						</h:selectOneMenu>
					</a4j:outputPanel>

					<a4j:outputPanel layout="block" id="objectivetree">
						<!-- tree-header -->
						<div class="tree-header">
							<div class="tree-nodename">Node</div>
							<a4j:outputPanel layout="block"
								rendered="#{not identifyRequirements.editingNodeComments}"
								styleClass="tree-nodeinfo">
								<div class="tree-cell" style="width: 60px;">Edit</div>
								<div class="tree-cell" style="width: 50px;">Single</div>
								<div class="tree-cell" style="width: 135px;">Scale</div>
								<div class="tree-cell" style="width: 180px;">Restriction</div>
								<div class="tree-cell" style="width: 90px;">Unit</div>
							</a4j:outputPanel>
							<a4j:outputPanel layout="block"
								rendered="#{identifyRequirements.editingNodeComments}"
								styleClass="tree-nodeinfo">
								Description
							</a4j:outputPanel>
						</div>

						<!-- tree-content -->
						<div class="tree-content">
							<rich:tree id="objectivetree-tree" var="node" immediate="true"
								toggleType="ajax">
								<rich:treeModelRecursiveAdaptor
									roots="#{identifyRequirements.treeRoots}"
									nodes="#{node.children}" leaf="#{node.leaf}"
									id="objectivetree-model">
									<rich:treeNode id="node"
										expanded="#{identifyRequirements.requirementstreeHelper.expandedNodes[node]}"
										styleClass="tree-node">
										<div class="tree-nodename input input-inline">
											<h:inputText required="true"
												requiredMessage="Please provide a name." id="name"
												value="#{node.name}">
												<f:validateLength maximum="255" minimum="1" />
												<a4j:ajax onbeforesubmit="changed()" event="change"
													listener="#{node.touch}" />
											</h:inputText>
											<div class="tree-nodedesc">
												<rich:message for="name" />
											</div>

											<a4j:outputPanel layout="block" styleClass="tree-nodedesc"
												rendered="#{identifyRequirements.editingNodeComments and node.leaf and (node.scale != null)}">
												<h:outputText value="#{node.scale.displayName}  " />
												<h:outputText rendered="#{node.scale.restricted}"
													value="#{node.scale.restriction}" />
												<h:outputText value="[#{node.scale.unit}]"
													rendered="#{not empty(node.scale.unit)}" />
												<br />
												<h:outputText
													value="#{(node.mapped ? (node.measure.name):'')}" />
											</a4j:outputPanel>
										</div>

										<!-- Measure -->
										<a4j:outputPanel styleClass="tree-nodeinfo input input-inline"
											layout="block"
											rendered="#{not identifyRequirements.editingNodeComments}">
											<div class="tree-cell" style="width: 60px;">
												<h:panelGrid id="menuPanel" columns="2" border="0">
													<rich:dropDownMenu event="onclick" mode="ajax"
														direction="bottomLeft" jointPoint="topLeft"
														hideDelay="500" style="z-index: 50; position: relative;">
														<f:facet name="label">
															<h:graphicImage
																name="gfx/icons/small/preferences-system.png"
																id="addLeafpic" />
														</f:facet>
														<rich:menuItem id="addLeaf" rendered="#{!node.leaf}"
															action="#{identifyRequirements.addLeaf(node)}"
															label="Add a leaf node" onclick="changed();"
															render="objectivetree-tree">
															<f:facet name="icon">
																<h:graphicImage
																	value="/resources/gfx/treetable/add-leaf.png"
																	width="16" height="16" />
															</f:facet>
														</rich:menuItem>
														<rich:menuItem id="addNode" rendered="#{!node.leaf}"
															action="#{identifyRequirements.addNode(node)}"
															label="Add an inner node" onclick="changed();"
																render="objectivetree-tree">
															<f:facet name="icon">
																<h:graphicImage name="gfx/treetable/add-node.png"
																	width="16" height="16" />
															</f:facet>
														</rich:menuItem>
														<rich:menuItem id="removeNode"
															rendered="#{node.parent!=null}" label="Remove"
															action="#{identifyRequirements.removeTreeNode(node)}"
															render="objectivetree-tree">
															<f:facet name="icon">
																<h:graphicImage name="gfx/treetable/trash-node.png"
																	width="16" height="16" />
															</f:facet>
														</rich:menuItem>
														<rich:menuItem id="convertToNode" rendered="#{node.leaf}"
															label="Convert to branch"
															action="#{identifyRequirements.convertToNode(node)}"
															onclick="changed();" render="objectivetree-tree">
															<f:facet name="icon">
																<h:graphicImage name="gfx/treetable/add-node.png"
																	width="16" height="16" />
															</f:facet>
														</rich:menuItem>
														<rich:menuItem id="convertToLeaf" label="Convert to leaf"
															rendered="#{not node.leaf and node.parent != null}"
															action="#{identifyRequirements.convertToLeaf(node)}"
															onclick="if(!confirm('Are you sure you want to convert this node and remove all of its children?'))return false;changed();"
															render="objectivetree-tree">
															<f:facet name="icon">
																<h:graphicImage name="gfx/treetable/add-leaf.png"
																	width="16" height="16" />
															</f:facet>
														</rich:menuItem>
													</rich:dropDownMenu>
													<a4j:outputPanel layout="block"
														rendered="#{node.leaf and not identifyRequirements.editingNodeComments}">
														<a4j:commandLink
															action="#{identifyRequirements.selectLeaf(node)}"
															render="editLeafMapping"
															oncomplete="#{rich:component('editLeafMapping')}.show();"
															execute="@this">
															<h:graphicImage id="showMapping"
																name="gfx/icons/paperclip#{(not node.mapped)?'':'-green'}.png"
																title="#{(node.mapped ? ('Edit measure: '.concat(node.measure.name)):'Select measure')}"
																width="22" height="22" />
														</a4j:commandLink>
													</a4j:outputPanel>
												</h:panelGrid>
											</div>

											<div class="tree-cell" style="width: 50px;">
												<h:selectBooleanCheckbox id="single" rendered="#{node.leaf}"
													onchange="changed();" value="#{node.single}">
													<a4j:ajax event="change" />
												</h:selectBooleanCheckbox>
											</div>

											<a4j:outputPanel layout="block" rendered="#{node.leaf}"
												styleClass="tree-cell" style="width: 135px;">
												<h:selectOneMenu valueChangeListener="#{node.touch}"
													value="#{node.scaleByClassName}" id="idScaleList"
													styleClass="p-select">
													<f:selectItem itemValue="" />
													<f:selectItems value="#{identifyRequirements.scaleList}" />
													<a4j:ajax onbeforesubmit="changed()" event="change"
														listener="#{node.touchIncludingScale}"
														render="objectivetree-tree" />
												</h:selectOneMenu>
											</a4j:outputPanel>

											<div class="tree-cell" style="width: 180px;">
												<h:inputText id="restriction" styleClass="p-input-text"
													value="#{node.scale.restriction}"
													disabled="#{node.leaf and (node.scale.immutableRestriction)}"
													rendered="#{node.leaf and (node.scale != null) and node.scale.restricted}">
													<f:validateLength maximum="255" />
													<a4j:ajax onbeforesubmit="changed()" event="change"
														listener="#{node.touchIncludingScale}"
														render="restriction" />
												</h:inputText>
												<rich:message for="restriction" />
											</div>

											<div class="tree-cell" style="width: 90px;">
												<h:inputText value="#{node.scale.unit}" id="unit"
													styleClass="p-input-text"
													rendered="#{node.leaf and (node.scale != null)}">
													<f:validateLength maximum="255" />
													<a4j:ajax onbeforesubmit="changed()" event="change"
														listener="#{node.touchIncludingScale}" />
												</h:inputText>
												<rich:message for="unit" />
												<h:inputText disabled="true" value=""
													styleClass="p-input-text"
													rendered="#{node.leaf and (node.scale == null)}" />
											</div>
										</a4j:outputPanel>

										<!-- Comment -->
										<a4j:outputPanel layout="block"
											rendered="#{identifyRequirements.editingNodeComments}"
											styleClass="tree-nodeinfo input input-inline">
											<div class="tree-cell">
												<h:inputTextarea id="node_description" rows="2"
													value="#{node.description}" styleClass="p-input-textarea">
													<f:validateLength maximum="32672" />
													<a4j:ajax onbeforesubmit="changed()" event="change"
														listener="#{node.touch}" />
												</h:inputTextarea>
											</div>
										</a4j:outputPanel>

									</rich:treeNode>
								</rich:treeModelRecursiveAdaptor>
							</rich:tree>
						</div>
					</a4j:outputPanel>
				</fieldset>

				<fieldset id="descriptiveinformation"
					class="center-position size-full">
					<legend class="fieldset-full-size-legend">
						<ui:include src="/plato/shared/legend_nav.xhtml" />
						Descriptive Information
					</legend>
					<p:inputTextArea id="description" labelText="Description:"
						input="#{identifyRequirements.plan.requirementsDefinition.description}"
						touchable="#{identifyRequirements.plan.requirementsDefinition}"
						required="false" />
				</fieldset>

				<fieldset id="uploads" class="center-position size-full">
					<legend class="fieldset-full-size-legend">
						<ui:include src="/plato/shared/legend_nav.xhtml" />
						Uploads
					</legend>

					<a4j:outputPanel layout="block" id="uploadsPanel">
						<p>Please attach extended documentation (about the
							requirements definition process, about suggested measurements, or
							about reasons for certain requirements) here:</p>
						<ui:repeat
							value="#{identifyRequirements.plan.requirementsDefinition.uploads}"
							var="file">
							<h:commandLink value="#{file.fullname}"
								action="#{identifyRequirements.downloadAttachedFile(file)}" />
	              (<h:outputText value="#{file.sizeInMB}">
								<f:convertNumber maxFractionDigits="2" groupingUsed="false" />
							</h:outputText> MB)
	            <a4j:commandButton value="Remove"
								action="#{identifyRequirements.removeAttachedFile(file)}"
								oncomplete="changed();" render="uploadsPanel" />
							<br />
						</ui:repeat>
						<a4j:commandButton value="Attach documentation file"
							oncomplete="#{rich:component('uploadPanel')}.show()"
							type="button" />
					</a4j:outputPanel>
				</fieldset>

				<a4j:outputPanel layout="block" id="policiesPanel"
					rendered="#{not empty(identifyRequirements.selectedPreservationCase)}">
					<fieldset id="policies_fieldset" class="center-position size-full">
						<legend class="fieldset-full-size-legend">
							<ui:include src="/plato/shared/legend_nav.xhtml" />
							Preservation case:
							#{identifyRequirements.selectedPreservationCase.name}
						</legend>
						<p>You can replace the current objective tree with a tree that
							is automatically created from the control policies you have
							defined for the selected preservation case. Please consider that
							this action replaces your current tree!</p>
						<h:commandButton id="policiesBtn"
							value="Create tree from preservation case"
							action="#{identifyRequirements.generateTreeFromPolicies()}" />
					</fieldset>
				</a4j:outputPanel>

				<fieldset id="importexport" class="center-position size-full">
					<legend class="fieldset-full-size-legend">
						<ui:include src="/plato/shared/legend_nav.xhtml" />
						Import / Export
					</legend>

					<a4j:outputPanel layout="block" id="importPanel">
						<rich:messages for="importPanel" id="importErrors" />
						<b>Import Freemind file</b>
						<p>
							You can replace the current objective tree with a tree specified
							in Freemind format by uploading it here. Bear in mind that this
							replaces your current tree! <a target="_blank"
								href="/plato/help/upload.html">How can I specify trees in
								XML?</a>
						</p>
						<a4j:commandButton value="Select File"
							oncomplete="#{rich:component('selectImportPanel')}.show()"
							type="button" />
						<a4j:outputPanel layout="inline"
							rendered="#{identifyRequirements.importFile != null}">
	                       #{identifyRequirements.importFile.fullname}
	                       <h:commandButton value="Import tree"
								action="#{identifyRequirements.importFreeMindWithoutUnits()}" />
							<h:commandButton value="Import tree including units"
								action="#{identifyRequirements.importFreeMindWithUnits()}" />
						</a4j:outputPanel>
					</a4j:outputPanel>

					<br /> <b>Export</b>
					<p>If you want to continue working on the tree in Freemind, you
						can download the current objective tree as mindmap file for
						Freemind. Please save the tree before downloading it!</p>
					<h:commandLink value="Download tree as mindmap"
						action="#{identifyRequirements.downloadTreeAsFreeMind()}"
						styleClass="default-button" />
				</fieldset>

				<p:savediscardproceed bean="#{viewWorkflow}" id="savediscardproceed" />
			</h:form>
		</div>


		<!-- ATTENTION: Because of a bug in RichFaces-4.0.0. (see: https://issues.jboss.org/browse/RF-11355) the <h:form> tag has to be placed
                        outside/around the <rich:popupPanel> tag instead of the usual form usage inside (where its containing elements are).
                        This workaround is described here: http://community.jboss.org/thread/171909
                        If the form is not placed outside/around backing bean actions are not called as expected. They are only called after
                        the second click (on buttons, etc.).
        -->
		<h:form>
			<!-- attach files panel -->
			<rich:popupPanel id="uploadPanel" width="500" height="450"
				domElementAttachment="form">
				<f:facet name="header">
					<h:outputText value="Upload file" />
				</f:facet>
				<f:facet name="controls">
					<h:graphicImage id="closeMapping"
						value="/resources/gfx/icons/cancel.png" title="Close" width="16"
						height="16" onclick="#{rich:component('uploadPanel')}.hide()" />
				</f:facet>
				<h:messages />

				<rich:fileUpload id="uploadResultFile"
					fileUploadListener="#{identifyRequirements.uploadFile}"
					onuploadcomplete="#{rich:component('uploadPanel')}.hide(); changed();"
					render="uploadsPanel" />
			</rich:popupPanel>
			<!-- / attach files panel -->
		</h:form>


		<!-- ATTENTION: Because of a bug in RichFaces-4.0.0. (see: https://issues.jboss.org/browse/RF-11355) the <h:form> tag has to be placed
                        outside/around the <rich:popupPanel> tag instead of the usual form usage inside (where its containing elements are).
                        This workaround is described here: http://community.jboss.org/thread/171909
                        If the form is not placed outside/around backing bean actions are not called as expected. They are only called after
                        the second click (on buttons, etc.).
        -->
		<h:form>
			<!-- select import panel -->
			<rich:popupPanel id="selectImportPanel" width="500" height="450"
				domElementAttachment="form">
				<f:facet name="header">
					<h:outputText value="Select file" />
				</f:facet>
				<f:facet name="controls">
					<h:graphicImage id="closeMapping"
						value="/resources/gfx/icons/cancel.png" title="Close" width="16"
						height="16"
						onclick="#{rich:component('selectImportPanel')}.hide()" />
				</f:facet>
				<h:messages />

				<rich:fileUpload id="selectImportFile"
					fileUploadListener="#{identifyRequirements.selectImportFile}"
					addLabel="Select" uploadLabel="Done" render="importPanel, messages"
					onuploadcomplete="#{rich:component('selectImportPanel')}.hide()" />
			</rich:popupPanel>
			<!-- / select import panel -->
		</h:form>

		<!-- ATTENTION: Because of a bug in RichFaces-4.0.0. (see: https://issues.jboss.org/browse/RF-11355) the <h:form> tag has to be placed
	                    outside/around the <rich:popupPanel> tag instead of the usual form usage inside (where its containing elements are).
	                    This workaround is described here: http://community.jboss.org/thread/171909
	                    If the form is not placed outside/around backing bean actions are not called as expected. They are only called after
	                    the second click (on buttons, etc.).
	    -->
		<h:form id="editLeafMappingForm">
			<!-- measure selection -->
			<rich:popupPanel id="editLeafMapping" width="800" autosized="true"
				domElementAttachment="form">
				<f:facet name="header">
					<h:outputText value="Select a Measure" />
				</f:facet>
				<f:facet name="controls">
					<h:graphicImage id="closeMapping"
						value="/resources/gfx/icons/cancel.png" title="Close" width="16"
						height="16" onclick="#{rich:component('editLeafMapping')}.hide()" />
				</f:facet>
				<p:criterionSelector id="criterionSelector"
					criterionSelector="#{identifyRequirements.critSelector}">
					<div>
						<h:panelGroup id="saveMappingButton">
							<a4j:commandLink id="saveCriterionMapping"
								rendered="#{null != identifyRequirements.critSelector.selectedMeasureName}"
								action="#{identifyRequirements.assignCriterionMapping}"
								oncomplete="#{rich:component('editLeafMapping')}.hide()"
								onclick="changed()" render="objectivetree-tree">
								<h:graphicImage library="gfx/icons" name="apply.png"
									title="Map measure to decision criteria" width="32" height="32" />
							</a4j:commandLink>
							<h:graphicImage
								rendered="#{null == identifyRequirements.critSelector.selectedMeasureName}"
								library="gfx/icons" name="apply-disabled.png"
								title="Map measure to decision criteria" width="32" height="32" />
						</h:panelGroup>

						<a4j:outputPanel layout="inline" id="removeMappingButton"
							style="float: right;">
							<a4j:commandLink id="removeCriterionMapping"
								action="#{identifyRequirements.detachCriterionMapping()}"
								oncomplete="#{rich:component('editLeafMapping')}.hide()"
								onclick="changed()" render="objectivetree-tree">
								<h:graphicImage library="gfx/icons" name="user-trash.png"
									title="Save Criterion mapping" width="32" height="32" />
							</a4j:commandLink>
						</a4j:outputPanel>
					</div>
				</p:criterionSelector>

			</rich:popupPanel>
			<!-- / measure selection -->
		</h:form>
	</ui:define>
</ui:composition>
